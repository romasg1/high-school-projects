
//main.c

/*
 * Projekt: BVStrom
 * Autor: David Martinek
 * Datum: 2020-11-11
 *
 * Popis: Program pro práci s binárním vyhledávacím stromem.
 *
 */

#include "gvid.h"       // par drobnosti pro zjednoduseni prace
#include <stdio.h>
#include <stdlib.h>
// #include <string.h>  // pro praci s textovymi retezci
#include <stdbool.h> // pro praci s typem bool a konstantami true a false
#include <ctype.h>   // isalpha, isspace, islower, isupper, ...
// #include <math.h>    // funkce z matematicke knihovny
// #include <float.h>   // konstanty pro racionalni typy DBL_MAX, DBL_DIG, ...
// #include <limits.h>  // konstanty pro celociselne typy INT_MAX, INT_MIN, ...
// #include <time.h>    // funkce time a dalsi pro praci s casem


// natažení rozhraní modulu strom
#include "strom.h"



//tohle jsou obalovaci funkce
void operace1(Tstrom *strom)
{
//Úkol1: Realizuj v modulu funkci, která zjistí výšku stromu
//a vyzkoušej ji tady.
  //printf("Tato operace jeste nebyla vytvorena.\n");
  int vyska=Vyska(strom->koren);
  printf("vyska: %d\n", vyska);
}

void operace2(Tstrom *strom)
{
//Úkol 2: Realizuj v modulu funkci, která vypíše prvky stromu průchodem
//preorder a vyzkoušej ji tady.
//Na každý řádek vypisuj dvojici klíč-data.
//printf("Tato operace jeste nebyla vytvorena.\n");
  PreOrder(strom->koren);
}

void operace3(Tstrom *strom)
{
//Úkol 3: Realizuj v modulu funkci, která vypíše prvky stromu průchodem
//postorder a vyzkoušej ji tady.
//Na každý řádek vypisuj dvojici klíč-data.
  //printf("Tato operace jeste nebyla vytvorena.\n");
  PostOrder(strom->koren);
}

void operace4(Tstrom *strom)
{
//Úkol 4: Realizuj v modulu funkci, která vypíše prvky stromu průchodem
//inorder a vyzkoušej ji tady.
//Na každý řádek vypisuj dvojici klíč-data.
  //printf("Tato operace jeste nebyla vytvorena.\n");
  InOrder(strom->koren);
}


/*
void vlozUzlyDoPole(Tuzel* u, Tuzel* pole, int* index) {
    if (u != NULL) {
        vlozUzlyDoPole(u->levy, pole, index);
        pole[*index] = *u;  // Ukládání hodnoty uzlu do pole
        (*index)++;
        vlozUzlyDoPole(u->pravy, pole, index);
    }
}

Tuzel* vyvazeniStromu(Tuzel* pole, int zacatek, int konec) {
    if (zacatek > konec) {
        return NULL;
    }

    int stred = (zacatek + konec) / 2;
    Tuzel* uzel = &pole[stred];

    uzel->levy = vyvazeniStromu(pole, zacatek, stred - 1);
    uzel->pravy = vyvazeniStromu(pole, stred + 1, konec);

    return uzel;
}*/

void operace5(Tstrom *strom) {
    // Úkol 5: Realizuj v modulu funkci, která zjistí, zda je strom vyvážený.
    bool ok = jeVyvazeny(strom->koren);
    if (ok) {
        printf("Strom je vyvazeny...\n");
    } else {
        printf("Strom nebyl vyvazeny, ale ja jsem profik, tak ho vyvazim...\n");

        // Vytvoření pole pro uložení uzlů
        //Tuzel* pole = malloc(strom->vaha * sizeof(Tuzel));
        //if (pole == NULL) return;

        //int index = 0;
        //
    vlozUzlyDoPole(strom->koren, pole, &index);

        // Vyvážení stromu
        strom->koren = vyvazeniStromu(pole, 0, index - 1);

        // Uvolnění paměti pole
        free(pole);
    }
}

/*

void vloz(Tuzel* u, Tuzel* pole, int* index){
   if(u == NULL)return;
   vloz(u->levy, pole, index);
}

void operace5(Tstrom *strom)
{
//Úkol 5: Realizuj v modulu funkci, která zjistí, zda je strom vyvážený.
bool ok=jeVyvazeny(strom->koren);
if(ok)printf("Strom je vyvazeny...\n");
else{
  printf("Strom nebyl vyvazeny, ale ja jsem profik, tak ho vyvazim...\n");

 Tuzel* pole=malloc(strom->vaha*sizeof(Tuzel));
 if(pole == NULL)return;

 int index=0;
 vlozUzlyDoPole(strom->koren, pole, &index);


free(pole);
}

//Úkol 6: Tady (mimo modul) napiš algoritmus, který strom vyváží.
//Návod:
//- Ulož si obsahy uzlů do pole seřazené podle klíčů.
//- (Vzpomeň si na princip průchodu polem při binárním vyhledávání.)
//- Vlož do stromu prostřední prvek pole.
//-- Pak totéž udělej rekurzivně s levou půlkou pole.
//-- Pak totéž udělej rekurzivně s pravou půlkou pole.
  //printf("Tato operace jeste nebyla vytvorena.\n");
}

*/



/** Vytiskne uživatelské menu*/
void menu(void)
{
  printf(
    "\n"
    "Inicializace/zruseni..................I\n"
    "Tisk stromu...........................T\n"
    "Vlozeni...............................V\n"
    "Vlozeni ZE SOUBORU....................S\n"
    "Odebrani..............................O\n"
    "Konec.................................K\n"
    "---------------------------------------\n"
    "Doplnene operace\n"
    "Ukol 1. Vyska Stromu..................1\n"
    "Ukol 2. Vypis PreOrder................2\n"
    "Ukol 3. Vypis PostOrder...............3\n"
    "Ukol 4. Vypis InOrder.................4\n"
    "Ukol 5. Je strom vyvazeny?............5\n"
    "\n"
    "Tva volba: "
  );
}

/** Volba pro obsluhu menu. */
char zjistiVolbu(void)
{
  char volba;
  scanf(" %c", &volba);

  int c;
  while((c = getchar()) != EOF && c != '\n') {}

  return volba;
}

/********************************* MAIN ***********************************/
int main(void)
{
  Tstrom *strom = bvsInit();

  char volba;
  char nazev[20];//pro soubor
  FILE* f;

  int konec = 0;
  do {
    printf("\n\n\n\n");
    menu();
    volba = zjistiVolbu();
    printf("\n\n\n\n\n");

    switch (toupper(volba))
    {
      case '1': // Úkol 1
        operace1(strom);
      break;

      case '2': // Úkol 2
        operace2(strom);
      break;

      case '3': // Úkol 3
        operace3(strom);
      break;

      case '4': // Úkol 4
        operace4(strom);
      break;

      case '5': // Úkol 5
        operace5(strom);
      break;



      case 'I': // Inicializace / zrušení
        bvsZrus(strom);
        strom = bvsInit();
        printf("Strom byl zrusen a znovu inicializovan.\n");
      break;

      case 'T': // Tisk stromu
        printf("Aktualni podoba stromu\n");
        bvsTisk(strom);
        printf("Pocet uzlu stromu: %d\n", bvsVaha(strom));
      break;


      case 'S':
        printf("Zadej nazev souboru: ");
        scanf("%19s", nazev);
        f=fopen(nazev, "r");
        if(f==NULL) return-1;
        nacti(f, strom);
        fclose(f);
        break;///*****************************BREAK!!!!************************************//

      case 'V': // Vložení
      {
        printf("Zadej hodnotu klice pro vlozeni - kladne cislo.\n");
        int klic;
        float data;
        scanf(" %d", &klic);
        printf("Zadej hodnotu dat ke klici %d - kladne desetinne cislo.\n", klic);
        scanf(" %f", &data);
        if (data < 0) data = -data;
        if (bvsVloz(strom, klic, data))
          printf("Uspech. Par (%d - %g) byl uspesne vlozen.\n", klic, data);
        else
          printf("Neuspech. Par (%d - %g) nebyl vlozen.\n", klic, data);
      }
      break;

      case 'O': // Odebrání
      {
        printf("Zadej hodnotu klice, ktery chces odebrat.\n");
        int klic;
        scanf(" %d", &klic);
        printf("Zadal jsi klic s hodnotou %d.\n", klic);
        if (bvsOdeber(strom, klic))
          printf("Uspech. Uzel se zadanym klicem odebran.\n");
        else
          printf("Neuspech. Uzel se zadanym klicem neodebran.\n");
      }
      break;

      case 'K': // Konec
        printf("Rusim strom a koncim.\n");
        konec = 1;
      break;

      default:
        printf("Neznamy prikaz. Zkus to znovu.\n");
      break;
    }
  } while (!konec);

  bvsZrus(strom);
  return EXIT_SUCCESS;
}






